# .github/workflows/db-seed.yml
name: seed
on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Напиши: prod (подтверждаю сид ПРОД БД)'
        required: true
        default: 'no'

concurrency:
  group: seed-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  seed:
    if: ${{ inputs.confirm == 'prod' }}
    runs-on: self-hosted
    env:
      NS: afterlight
    steps:
      - uses: actions/checkout@v4

      - name: kubeconfig
        run: |
          mkdir -p "$HOME/.kube"
          printf "%s" "${{ secrets.KUBECONFIG_AFTERLIGHT }}" > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Create seed Job
        id: create
        run: |
          JOB_NAME=$(kubectl -n "$NS" create -f k8s/job-prisma-seed.yaml -o jsonpath='{.metadata.name}')
          echo "job=${JOB_NAME}" >> $GITHUB_OUTPUT

      - name: Wait up to 10m for complete OR detect failure
        run: |
          JOB="${{ steps.create.outputs.job }}"
          kubectl -n "$NS" wait --for=condition=complete --timeout=10m "job/$JOB" || true
          kubectl -n "$NS" wait --for=condition=failed --timeout=1s "job/$JOB" || true

      - name: Collect diagnostics
        if: always()
        run: |
          JOB="${{ steps.create.outputs.job }}"
          echo "== Job describe =="
          kubectl -n "$NS" describe job "$JOB" || true
          echo "== Pods list =="
          kubectl -n "$NS" get pods -l job-name="$JOB" -o name || true
          for p in $(kubectl -n "$NS" get pods -l job-name="$JOB" -o name); do
            echo "--- logs $p ---"
            kubectl -n "$NS" logs "$p" --all-containers || true
            kubectl -n "$NS" logs "$p" --all-containers --previous || true
            echo "--- describe $p ---"
            kubectl -n "$NS" describe "$p" || true
          done
          echo "== Recent events =="
          kubectl -n "$NS" get events --sort-by=.lastTimestamp | tail -n 200 || true

      - name: Fail if job did not succeed
        if: steps.create.outputs.job != ''
        run: |
          s=$(kubectl -n "$NS" get job "${{ steps.create.outputs.job }}" -o jsonpath='{.status.succeeded}')
          if [ "$s" != "1" ]; then
            echo "Seed job did not complete successfully" >&2
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          kubectl -n "$NS" delete job/${{ steps.create.outputs.job }} --ignore-not-found=true --wait=false
