name: cd

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE*"
      - "CODE_OF_CONDUCT*"
      - "CONTRIBUTING*"
      - "LICENSE*"
      - "CHANGELOG*"

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: grayhex
  IMAGE_API: afterlight-api
  IMAGE_WEB: afterlight-web

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_API }}:${{ github.sha }}
          provenance: false

      - name: Build & push WEB
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.web
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_WEB }}:${{ github.sha }}
          provenance: false

  deploy:
    name: deploy-to-k3s
    runs-on: self-hosted
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '[skip cd]') }}
    env:
      NS: afterlight
    steps:
      - name: Write kubeconfig from secret
        run: |
          mkdir -p "$HOME/.kube"
          printf "%s" "${{ secrets.KUBECONFIG_AFTERLIGHT }}" > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Check kubectl and kubeconfig
        run: |
          kubectl version --client
          kubectl config current-context

      - name: Deploy API & WEB (set image or restart)
        env:
          NEW_API: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_API }}:${{ github.sha }}
          NEW_WEB: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_WEB }}:${{ github.sha }}
        run: |
          set -euo pipefail

          echo "=== API ==="
          CUR_API=$(kubectl -n "$NS" get deploy/afterlight-api -o jsonpath='{.spec.template.spec.containers[?(@.name=="api")].image}')
          echo "Current: $CUR_API"
          echo "New:     $NEW_API"
          if [ "$CUR_API" = "$NEW_API" ]; then
            echo "Image unchanged -> rollout restart (API)"
            kubectl -n "$NS" rollout restart deploy/afterlight-api
          else
            echo "Updating image (API)"
            kubectl -n "$NS" set image deploy/afterlight-api api="$NEW_API"
          fi

          echo "=== WEB ==="
          CUR_WEB=$(kubectl -n "$NS" get deploy/afterlight-web -o jsonpath='{.spec.template.spec.containers[?(@.name=="web")].image}')
          echo "Current: $CUR_WEB"
          echo "New:     $NEW_WEB"
          if [ "$CUR_WEB" = "$NEW_WEB" ]; then
            echo "Image unchanged -> rollout restart (WEB)"
            kubectl -n "$NS" rollout restart deploy/afterlight-web
          else
            echo "Updating image (WEB)"
            kubectl -n "$NS" set image deploy/afterlight-web web="$NEW_WEB"
          fi

      - name: Wait for rollout
        run: |
          set -e
          kubectl -n $NS rollout status deploy/afterlight-api
          kubectl -n $NS rollout status deploy/afterlight-web

      - name: Debug on failure
        if: failure()
        run: |
          kubectl -n $NS describe deploy/afterlight-api || true
          kubectl -n $NS describe deploy/afterlight-web || true
          kubectl -n $NS describe pods -l app=afterlight-api || true
          kubectl -n $NS describe pods -l app=afterlight-web || true
          kubectl -n $NS logs deploy/afterlight-api --all-containers --tail=200 || true
          kubectl -n $NS logs deploy/afterlight-web --all-containers --tail=200 || true
          kubectl -n $NS get events --sort-by='.lastTimestamp' | tail -n 50 || true
