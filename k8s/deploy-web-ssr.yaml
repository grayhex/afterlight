apiVersion: apps/v1
kind: Deployment
metadata:
  name: afterlight-web
  namespace: afterlight
  labels: { app: afterlight-web }
spec:
  replicas: 1
  revisionHistoryLimit: 2
  progressDeadlineSeconds: 300
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels: { app: afterlight-web }
  template:
    metadata:
      labels: { app: afterlight-web }
    spec:
      containers:
      - name: web
        image: ghcr.io/grayhex/afterlight-web:latest
        imagePullPolicy: Always
        command: ["node", "server.js"]
        env:
        - name: PORT
          value: "3000"
        - name: NEXT_PUBLIC_API_BASE_URL
          value: "https://api.afterl.ru"
        ports:
        - containerPort: 3000
        startupProbe:
          tcpSocket: { port: 3000 }
          periodSeconds: 10
          failureThreshold: 30
        readinessProbe:
          tcpSocket: { port: 3000 }
          periodSeconds: 10
          failureThreshold: 6
        livenessProbe:
          tcpSocket: { port: 3000 }
          initialDelaySeconds: 20
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: afterlight-web
  namespace: afterlight
  labels: { app: afterlight-web }
spec:
  selector: { app: afterlight-web }
  ports:
  - name: http
    port: 80
    targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: afterlight-web
  namespace: afterlight
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts: ["afterl.ru","www.afterl.ru"]
    secretName: afterlight-web-tls
  rules:
  - host: afterl.ru
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: { name: afterlight-web, port: { number: 80 } }
  - host: www.afterl.ru
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: { name: afterlight-web, port: { number: 80 } }
