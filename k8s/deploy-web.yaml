apiVersion: apps/v1
kind: Deployment
metadata:
  name: afterlight-web
  namespace: afterlight
  labels: { app: afterlight-web }
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels: { app: afterlight-web }
  template:
    metadata:
      labels: { app: afterlight-web }
    spec:
      containers:
      - name: web
        image: ghcr.io/grayhex/afterlight-web:latest  # switch to :${SHA} for immutable deploys
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet: { path: /, port: 80 }
          periodSeconds: 10
          failureThreshold: 6
        livenessProbe:
          httpGet: { path: /healthz, port: 80 }
          initialDelaySeconds: 15
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: afterlight-web
  namespace: afterlight
  labels: { app: afterlight-web }
spec:
  selector: { app: afterlight-web }
  ports:
  - name: http
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: afterlight-web
  namespace: afterlight
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts: ["afterl.ru","www.afterl.ru"]
    secretName: afterlight-web-tls
  rules:
  - host: afterl.ru
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: afterlight-web
            port: { number: 80 }
  - host: www.afterl.ru
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: afterlight-web
            port: { number: 80 }
