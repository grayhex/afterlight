// Prisma schema for AfterLight (v0.1) — PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VaultStatus { Active Triggered PendingGrace Released Closed }
enum BlockType { text file url }
enum VerifierRoleStatus { Invited Active Revoked }
enum KycLevel { None Basic Enhanced }
enum VerificationState { Draft Submitted Confirming Disputed QuorumReached HeartbeatTimeout Grace Finalized }
enum Decision { Confirm Deny }
enum HeartbeatMethod { auto manual }
enum NotificationChannel { email sms telegram push }
enum NotificationState { Queued Sent Failed }
enum PlanTier { Free Pro Business }
enum SubscriptionStatus { trial active canceled }
enum ActorType { User Verifier System }

model User {
  id            String   @id @default(uuid()) @db.Uuid @map("id")
  email         String   @unique
  phone         String?
  passkeyPub    String?  @map("passkey_pub")
  twoFaEnabled  Boolean  @default(false) @map("two_fa_enabled")
  locale        String   @default("ru-RU")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  vaults        Vault[]
  subscriptions Subscription[]

  @@map("user")
}

model Vault {
  id                     String       @id @default(uuid()) @db.Uuid @map("id")
  userId                 String       @db.Uuid @map("user_id")
  status                 VaultStatus  @default(Active)
  quorumThreshold        Int          @default(3) @map("quorum_threshold")
  maxVerifiers           Int          @default(5) @map("max_verifiers")
  heartbeatTimeoutDays   Int          @default(60) @map("heartbeat_timeout_days")
  graceHours             Int          @default(24) @map("grace_hours")
  isDemo                 Boolean      @default(false) @map("is_demo")
  mkWrapped              String       @map("mk_wrapped")
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @updatedAt @map("updated_at")

  user                   User         @relation(fields: [userId], references: [id])
  blocks                 Block[]
  verifiers              VaultVerifier[]
  events                 VerificationEvent[]
  heartbeat              Heartbeat?
  notifications          Notification[]
  recoveryShares         RecoveryShare[]

  @@index([userId], map: "ix_vault_user_id")
  @@map("vault")
}

model Block {
  id           String    @id @default(uuid()) @db.Uuid @map("id")
  vaultId      String    @db.Uuid @map("vault_id")
  type         BlockType
  dekWrapped   String    @map("dek_wrapped")
  metadata     Json?
  tags         String[] // ок, Postgres text[]
  size         BigInt?   
  checksum     String?
  isPublic     Boolean   @default(false) @map("is_public")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  vault        Vault     @relation(fields: [vaultId], references: [id])
  recipients   BlockRecipient[]
  publicLink   PublicLink?

  @@index([vaultId], map: "ix_block_vault_id")
  @@map("block")
}

model Recipient {
  id                  String   @id @default(uuid()) @db.Uuid @map("id")
  contact             String
  pubkey              String?
  verificationStatus  String   @default("Invited") @map("verification_status")
  createdAt           DateTime @default(now()) @map("created_at")

  blocks              BlockRecipient[]

  @@index([contact], map: "ix_recipient_contact")
  @@map("recipient")
}

model BlockRecipient {
  blockId                 String   @db.Uuid @map("block_id")
  recipientId             String   @db.Uuid @map("recipient_id")
  dekWrappedForRecipient  String   @map("dek_wrapped_for_recipient")
  createdAt               DateTime @default(now()) @map("created_at")

  block                   Block     @relation(fields: [blockId], references: [id])
  recipient               Recipient @relation(fields: [recipientId], references: [id])

  @@id([blockId, recipientId])
  @@index([recipientId], map: "ix_block_recipient_recipient_id")
  @@map("block_recipient")
}

model Verifier {
  id         String   @id @default(uuid()) @db.Uuid @map("id")
  contact    String
  pubkey     String?
  kycLevel   KycLevel @default(None) @map("kyc_level")
  createdAt  DateTime @default(now()) @map("created_at")

  vaults     VaultVerifier[]
  decisions  VerificationDecision[]
