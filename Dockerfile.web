# ---- build deps & app ----
FROM node:20-alpine AS build
WORKDIR /app
RUN apk add --no-cache python3 make g++ && corepack enable

# копируем только фронт, чтобы контекст был компактнее
COPY apps/web ./apps/web
WORKDIR /app/apps/web

# ставим зависимости и собираем
# (если есть lock-файл, используем его; иначе обычный install)
RUN if [ -f pnpm-lock.yaml ]; then corepack prepare pnpm@9 --activate && pnpm i --frozen-lockfile; \
    elif [ -f yarn.lock ]; then corepack prepare yarn@4 --activate && yarn install --immutable; \
    elif [ -f package-lock.json ]; then npm ci; else npm i; fi

RUN npm run build

# ---- runtime (без standalone) ----
FROM node:20-alpine AS runtime
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME=0.0.0.0
WORKDIR /app/apps/web

# копируем всё нужное для next start
COPY --from=build /app/apps/web/.next ./.next
COPY --from=build /app/apps/web/node_modules ./node_modules
COPY --from=build /app/apps/web/package.json ./package.json
COPY --from=build /app/apps/web/next.config.mjs ./next.config.mjs
COPY --from=build /app/apps/web/public ./public

EXPOSE 3000

# запускаем Next.js сервер
CMD ["node", "node_modules/next/dist/bin/next", "start", "-p", "3000"]
